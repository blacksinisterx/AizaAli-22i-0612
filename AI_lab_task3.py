# -*- coding: utf-8 -*-
"""Copy of Lab_Task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LBYvumn9S-5riFF39bfY0wPSvqMrKEVK

# Lab Task 01

Write a function to return True if the first and last number of a given list is same. If numbers are different then return False.
"""

# Given:
numbers_x = [10, 20, 30, 40, 10]
numbers_y = [75, 65, 35, 75, 30]

# Expected Output:
# Given list: [10, 20, 30, 40, 10]
# result is True

# numbers_y = [75, 65, 35, 75, 30]
# result is False

if numbers_x[0] == numbers_x[-1]:
  print(True)
else:
  print(False)

if numbers_y[0] == numbers_y[-1]:
  print(True)
else:
  print(False)





"""# Lab Task 02

Create two NumPy arrays of the same shape and perform element-wise addition on them.

Calculate the element-wise product of two NumPy arrays.
"""

import numpy as np

#code here
nparray1=np.array([1,2,3,4,5])
nparray2=np.array([6,7,8,9,10])
# element-wise addition
nparray3=nparray1+nparray2
nparray3

#element-wise multiplication
nparray4=nparray1*nparray2
nparray4

"""# Lab Task 03

Reshape a 1D NumPy array into a 2D array with dimensions (3, 4).

Concatenate two NumPy arrays horizontally and vertically.
"""

#code here
array1d=np.arange(1,24,2)
array1d

array2d=array1d.reshape(3,4)
array2d

arr1=np.arange(1,20,2)
arr1=arr1.reshape(2,5)
arr1

arr2=np.array([[2,3,4,5,6],
               [1,2,3,4,5]])
arr2

#vertical concatenation
np.concatenate((arr1,arr2),axis=0)

np.vstack((arr1,arr2))

#horizontal concatenation
np.concatenate((arr1,arr2),axis=1)

np.hstack((arr1,arr2))

"""# Lab Task 04

## Online Store Shopping Cart
Write a Python program to simulate the online store's shopping cart system. The program should use a while loop to provide an interactive shopping experience.


### Tasks:
* Initialize an empty list called shopping_cart to store items.
* Display a welcome message and available products.
* Loop should be iterating over AI Response Simulator and Investment decision and keep asking for user input.
* Prompt the user to enter the number corresponding to the product they want to add to the cart.
* Check if the user entered 'q'. If so, break the loop.
* Convert the choice to an integer and validate it within the valid range (1 to 3).
* Based on the user's choice, add the selected product to the shopping_cart list.
* Display a confirmation message indicating the added product.
* Continue the loop to allow the user to add more products or proceed to checkout.
* After the loop ends, display the contents of the shopping cart.
* Display a goodbye message.
* End the program.
"""

#Code here
shop={1:"Fruits",2:"Vegetables",3:"Meat"}
shopping_cart=[]
quitkey='q'
keypress='s'
confirm='y'
print("Welcome to SuperMarket")
#print("Available Products:\nPress 1 to Add to your cart: Fruits.\nPress 2 to Add to your cart: Vegetables.\nPress 3 to Add to your cart: Meat\nPress q to Quit")
while keypress != quitkey:
  keypress=input("Available Products:\nPress 1 to Add to your cart: Fruits.\nPress 2 to Add to your cart: Vegetables.\nPress 3 to Add to your cart: Meat\nPress q to Quit\n")
  if keypress=='1':
    confirm=input("Are you sure you want to add Fruits.\nPress y to confirm and any other key to cancel.")
    if confirm == 'y':
      shopping_cart.append('Fruits')
  elif keypress=='2':
    confirm=input("Are you sure you want to add Vegetables.\nPress y to confirm and any other key to cancel.")
    if confirm == 'y':
      shopping_cart.append('Vegetables')
  elif keypress=='3':
    confirm=input("Are you sure you want to add Meat.\nPress y to confirm and any other key to cancel.")
    if confirm == 'y':
      shopping_cart.append('Meats')
print("Your Cart: ",shopping_cart)
print("Thanks for shopping.")

shop={1:"Fruits",2:"Vegetables",3:"Meat"}
shop[1]

"""# Lab Task 05

## Email Classification
Develope a tool which will classify an email.

### Tasks:
* Create a function classify_emails that takes a list of emails as an argument.
* Inside the function, categorize emails into "Important," "Promotions," and "Spam" based on keywords and content analysis.
* Loop through the emails and identify keywords to determine their category.
* If an email contains keywords indicating importance, assign it as "Important."
* If an email contains keywords related to promotions or deals, assign it as "Promotions."
* If an email is suspected to be spam based on certain keywords or patterns, assign it as "Spam."
* Return three lists of emails for each category.
* Print the lists.
"""

#code here
imp=['important','urgent','inform','importance','necessary']
important=[]
spam=['Free money','Click below','Click here','100% free','100% satisfied']
spammail=[]
promo=['Limited Time Offer','Exclusive Deal','Exclusive Offer','Introducing']
promotional=[]
emails=["Dear sir, it is important to note that i do my work on time. Thanks.","We are offering you 100% free free money get yours by clicking link below","Dear Customer, We have brought you an Exclusive Deal.Thanks."]
for i in emails:
  if any(x in i for x in imp):
    important.append(i)
  elif any(x in i for x in spam):
    spammail.append(i)
  elif any(x in i for x in promo):
    promotional.append(i)
print("IMPORTANT", important)
print("SPAM", spammail)
print("Promotions", promotional)

"""# Lab Task 06

## English-Spanish Dictionary
You are creating a basic English-Spanish dictionary that allows users to look up English words and find their Spanish translations.


### Tasks
* Create a dictionary where English words are keys and their Spanish translations are values.
* Ask the user to input an English word.
* Check if the word exists in the dictionary.
* If the word exists, print its Spanish translation.
* If the word does not exist, inform the user that the translation is not available.
* Implement a loop that allows the user to keep looking up words until they choose to exit.
"""

#code here
engtospan={"hi":"hola","bye":"adiós","red":"rojo","blue":"azul","how":"cómo","you":"tú","i am":"soy","why":"por qué"}
keyp='s'
while keyp != 'q':
  word=input("Enter English word\n")
  if word in engtospan.keys():
    print(word," : ",engtospan.get(word))
  else:
    print("the translation is not available")
  keyp=input("would you like to quit Press q. If you would like to trranslate again press any key.\n")

"""# Lab Task 07

dataset link : https://raw.githubusercontent.com/TirendazAcademy/PANDAS-TUTORIAL/main/DataSets/vgsalesGlobale.csv
#Exercise
Use the dataset of Game, we have explored earlier and perform following operations.

* Calculate the total global sales for all games in the dataset.
* Find the game with the highest global sales.
* Determine the average sales for each region (NA_Sales, EU_Sales, JP_Sales, Other_Sales).
* Find the top 5 most popular game genres based on global sales.
* Calculate the total sales for each genre in each region and find the most popular genre in North America (NA_Sales).
* Display last 10 rows.
* Determine the top 3 gaming platforms with the highest global sales.
* Calculate the market share (percentage of global sales) for each genre.
* Calculate the correlation coefficient between NA_Sales and EU_Sales. (.corr function)
"""

import pandas as pd

url="https://raw.githubusercontent.com/TirendazAcademy/PANDAS-TUTORIAL/main/DataSets/vgsalesGlobale.csv"
df=pd.read_csv(url)
df

totalglobal=df['Global_Sales'].sum()
totalglobal

game=df['Global_Sales'].max()
game

print(df[df.Global_Sales==game])

#(NA_Sales, EU_Sales, JP_Sales, Other_Sales)
navg=df['NA_Sales'].mean()
euavg=df['EU_Sales'].mean()
other=df['Other_Sales'].mean()
print("NA_Sales Average",navg)
print("EU_Sales Average",euavg)
print("Other_Sales Average",other)

#Find the top 5 most popular game genres based on global sales.
topglobalgenre=df.groupby('Genre')['Global_Sales'].sum()
top5=topglobalgenre.nlargest(5)
top5

#Calculate the total sales for each genre in each region and find the most popular genre in North America (NA_Sales).
df.groupby('Genre')[['NA_Sales','EU_Sales','JP_Sales','Other_Sales']].sum()

NAgenre=df.groupby('Genre')['NA_Sales'].sum().nlargest(1)
NAgenre



df.tail(10)

#Determine the top 3 gaming platforms with the highest global sales.
gaming=df.groupby('Platform')['Global_Sales'].sum().nlargest(3)
gaming



# Calculate the market share (percentage of global sales) for each genre.
#groupby genre with global sales / global sales both already done above
topglobalgenre=df.groupby('Genre')['Global_Sales'].sum()
totalglobal=df['Global_Sales'].sum()
market=(topglobalgenre/totalglobal)*100
market



#Calculate the correlation coefficient between NA_Sales and EU_Sales. (.corr function)

df['NA_Sales'].corr(df['EU_Sales'])



